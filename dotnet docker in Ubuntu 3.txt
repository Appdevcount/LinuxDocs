<3>WSL (2189) ERROR: CreateProcessEntryCommon:357: getpwnam(myusername) failed 0
Welcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.15.90.1-microsoft-standard-WSL2 x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

This message is shown once a day. To disable it please create the
/home/wsllinux/.hushlogin file.
wsllinux@HomeTechPAD:~$ docker ps -a
CONTAINER ID   IMAGE                     COMMAND                  CREATED         STATUS                     PORTS     NAMES
f160e877d5d7   appcount/webiapiimage:1   "dotnet WebApi.dll"      3 minutes ago   Exited (0) 2 minutes ago             webapicontainer1
ce5144bd6cdb   appcount/webiapiimage:1   "dotnet WebApi.dll -…"   8 minutes ago   Exited (0) 5 minutes ago             webapicontainer
55ce8932220c   node                      "docker-entrypoint.s…"   2 days ago      Exited (0) 2 days ago                dreamy_germain
wsllinux@HomeTechPAD:~$ docker rm ce5144bd
ce5144bd
wsllinux@HomeTechPAD:~$ docker images
REPOSITORY              TAG       IMAGE ID       CREATED        SIZE
appcount/webiapiimage   1         3fc1b6ffe8e0   27 hours ago   213MB
node                    latest    acd15857ce39   3 days ago     1GB
wsllinux@HomeTechPAD:~$ docker inspect f160e877d
[
    {
        "Id": "f160e877d5d7f9629f4dd6b5f7929a31d43b403662d42f31db65ed82c8d3007e",
        "Created": "2023-05-07T19:09:40.943323236Z",
        "Path": "dotnet",
        "Args": [
            "WebApi.dll"
        ],
        "State": {
            "Status": "exited",
            "Running": false,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 0,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2023-05-07T19:09:41.54911416Z",
            "FinishedAt": "2023-05-07T19:10:23.273067044Z"
        },
        "Image": "sha256:3fc1b6ffe8e05158422236c7de30012297e7a3f27b63af6fd216a4f49d5890a8",
        "ResolvConfPath": "/var/lib/docker/containers/f160e877d5d7f9629f4dd6b5f7929a31d43b403662d42f31db65ed82c8d3007e/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/f160e877d5d7f9629f4dd6b5f7929a31d43b403662d42f31db65ed82c8d3007e/hostname",
        "HostsPath": "/var/lib/docker/containers/f160e877d5d7f9629f4dd6b5f7929a31d43b403662d42f31db65ed82c8d3007e/hosts",
        "LogPath": "/var/lib/docker/containers/f160e877d5d7f9629f4dd6b5f7929a31d43b403662d42f31db65ed82c8d3007e/f160e877d5d7f9629f4dd6b5f7929a31d43b403662d42f31db65ed82c8d3007e-json.log",
        "Name": "/webapicontainer1",
        "RestartCount": 0,
        "Driver": "overlay2",
        "Platform": "linux",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": null,
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "default",
            "PortBindings": {
                "5000/tcp": [
                    {
                        "HostIp": "",
                        "HostPort": "8000"
                    }
                ]
            },
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "ConsoleSize": [
                37,
                137
            ],
            "CapAdd": null,
            "CapDrop": null,
            "CgroupnsMode": "host",
            "Dns": [],
            "DnsOptions": [],
            "DnsSearch": [],
            "ExtraHosts": null,
            "GroupAdd": null,
            "IpcMode": "private",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "Isolation": "",
            "CpuShares": 0,
            "Memory": 0,
            "NanoCpus": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": [],
            "BlkioDeviceReadBps": [],
            "BlkioDeviceWriteBps": [],
            "BlkioDeviceReadIOps": [],
            "BlkioDeviceWriteIOps": [],
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpuRealtimePeriod": 0,
            "CpuRealtimeRuntime": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": [],
            "DeviceCgroupRules": null,
            "DeviceRequests": null,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": null,
            "OomKillDisable": false,
            "PidsLimit": null,
            "Ulimits": null,
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0,
            "MaskedPaths": [
                "/proc/asound",
                "/proc/acpi",
                "/proc/kcore",
                "/proc/keys",
                "/proc/latency_stats",
                "/proc/timer_list",
                "/proc/timer_stats",
                "/proc/sched_debug",
                "/proc/scsi",
                "/sys/firmware"
            ],
            "ReadonlyPaths": [
                "/proc/bus",
                "/proc/fs",
                "/proc/irq",
                "/proc/sys",
                "/proc/sysrq-trigger"
            ]
        },
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/025e01938f3095185c5d0bb265427dd891d72a112a9fade4d77684b75aeaaf91-init/diff:/var/lib/docker/overlay2/63lbdcdyrpjg3axjbjwoubz1r/diff:/var/lib/docker/overlay2/s706rnte9kg7c8u4ic02e4wds/diff:/var/lib/docker/overlay2/59d88fe4798fce0c0df189cd47c1147aa1e4a911bcf40fbf5cc9bbb7df29edfb/diff:/var/lib/docker/overlay2/ee39679cbf4574814ec922453b8cd8861affd1210f9056d840211c6ea4400fef/diff:/var/lib/docker/overlay2/ed43753a771db91c0a8b2a1661e45f05297a877a6255b15af1f25fbab96d7735/diff:/var/lib/docker/overlay2/85bc8ae6494460dc4340ce8e7d7482f4426e608cdd88e2c414754b93a2bbf5cc/diff:/var/lib/docker/overlay2/ccc7741d78b6ebd31ceaf908d5a581aaa437b09155079166cd6055e7fd857c71/diff",
                "MergedDir": "/var/lib/docker/overlay2/025e01938f3095185c5d0bb265427dd891d72a112a9fade4d77684b75aeaaf91/merged",
                "UpperDir": "/var/lib/docker/overlay2/025e01938f3095185c5d0bb265427dd891d72a112a9fade4d77684b75aeaaf91/diff",
                "WorkDir": "/var/lib/docker/overlay2/025e01938f3095185c5d0bb265427dd891d72a112a9fade4d77684b75aeaaf91/work"
            },
            "Name": "overlay2"
        },
        "Mounts": [],
        "Config": {
            "Hostname": "f160e877d5d7",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": true,
            "AttachStderr": true,
            "ExposedPorts": {
                "5000/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "ASPNETCORE_URLS=http://+:5000",
                "DOTNET_RUNNING_IN_CONTAINER=true",
                "DOTNET_VERSION=6.0.16",
                "ASPNET_VERSION=6.0.16",
                "ASPNETCORE_ENVIRONMENT=Development"
            ],
            "Cmd": null,
            "Image": "appcount/webiapiimage:1",
            "Volumes": null,
            "WorkingDir": "/App",
            "Entrypoint": [
                "dotnet",
                "WebApi.dll"
            ],
            "OnBuild": null,
            "Labels": {
                "desktop.docker.io/wsl-distro": "Ubuntu-22.04"
            }
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "a1a3b7760729302cdc3ad9dfeb45be1766540b19d6fd9887f9334b5abf22b1c8",
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "Ports": {},
            "SandboxKey": "/var/run/docker/netns/a1a3b7760729",
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "",
            "Gateway": "",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "",
            "IPPrefixLen": 0,
            "IPv6Gateway": "",
            "MacAddress": "",
            "Networks": {
                "bridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,
                    "NetworkID": "156c0d48eda4e953ae4fa4bc512540a3a6e9e8517395b94a9a6860e9b3751036",
                    "EndpointID": "",
                    "Gateway": "",
                    "IPAddress": "",
                    "IPPrefixLen": 0,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": "",
                    "DriverOpts": null
                }
            }
        }
    }
]
wsllinux@HomeTechPAD:~$ docker inspect 3fc1b6ffe8e
[
    {
        "Id": "sha256:3fc1b6ffe8e05158422236c7de30012297e7a3f27b63af6fd216a4f49d5890a8",
        "RepoTags": [
            "appcount/webiapiimage:1"
        ],
        "RepoDigests": [],
        "Parent": "",
        "Comment": "buildkit.dockerfile.v0",
        "Created": "2023-05-06T15:59:07.449189236Z",
        "Container": "",
        "ContainerConfig": {
            "Hostname": "",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": null,
            "Cmd": null,
            "Image": "",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": null,
            "OnBuild": null,
            "Labels": null
        },
        "DockerVersion": "",
        "Author": "",
        "Config": {
            "Hostname": "",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": {
                "5000/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "ASPNETCORE_URLS=http://+:5000",
                "DOTNET_RUNNING_IN_CONTAINER=true",
                "DOTNET_VERSION=6.0.16",
                "ASPNET_VERSION=6.0.16",
                "ASPNETCORE_ENVIRONMENT=Development"
            ],
            "Cmd": null,
            "Image": "",
            "Volumes": null,
            "WorkingDir": "/App",
            "Entrypoint": [
                "dotnet",
                "WebApi.dll"
            ],
            "OnBuild": null,
            "Labels": null
        },
        "Architecture": "amd64",
        "Os": "linux",
        "Size": 212698133,
        "VirtualSize": 212698133,
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/s706rnte9kg7c8u4ic02e4wds/diff:/var/lib/docker/overlay2/59d88fe4798fce0c0df189cd47c1147aa1e4a911bcf40fbf5cc9bbb7df29edfb/diff:/var/lib/docker/overlay2/ee39679cbf4574814ec922453b8cd8861affd1210f9056d840211c6ea4400fef/diff:/var/lib/docker/overlay2/ed43753a771db91c0a8b2a1661e45f05297a877a6255b15af1f25fbab96d7735/diff:/var/lib/docker/overlay2/85bc8ae6494460dc4340ce8e7d7482f4426e608cdd88e2c414754b93a2bbf5cc/diff:/var/lib/docker/overlay2/ccc7741d78b6ebd31ceaf908d5a581aaa437b09155079166cd6055e7fd857c71/diff",
                "MergedDir": "/var/lib/docker/overlay2/63lbdcdyrpjg3axjbjwoubz1r/merged",
                "UpperDir": "/var/lib/docker/overlay2/63lbdcdyrpjg3axjbjwoubz1r/diff",
                "WorkDir": "/var/lib/docker/overlay2/63lbdcdyrpjg3axjbjwoubz1r/work"
            },
            "Name": "overlay2"
        },
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:8553b91047dad45bedc292812586f1621e0a464a09a7a7c2ce6ac5f8ba2535d7",
                "sha256:b224b13a335e31c152e58c87bb237b9df70c0f8684935bce865af9d2d06e3cfc",
                "sha256:39a43ba957e5bc5383c0a84b5e29e732df565b0f37a1bf4385d786a00f1fb68b",
                "sha256:a51547ae5e97de9c97e9804cafa056e38506f676ab074c8c9d18219f3037429a",
                "sha256:0ccc3c25b88392478787f9ad03942fa5dd39b65b12c088878bee82feca88c1b9",
                "sha256:8f5e8d0a39871492fcc9299b2022a7e5251ef3e340721d5f2837b8c159b191de",
                "sha256:f12b795108298f6efaa687e382e4c5db120707dcdc07802b4f6811eddf73737a"
            ]
        },
        "Metadata": {
            "LastTagTime": "2023-05-07T18:59:58.271849115Z"
        }
    }
]
wsllinux@HomeTechPAD:~$ cd dotnetProjects/
wsllinux@HomeTechPAD:~/dotnetProjects$ cd WebApi/
wsllinux@HomeTechPAD:~/dotnetProjects/WebApi$ cat dockerfile.Dev
# Step 1: Specify your base/parent docker image that will be used to build the actual application  in FROM instruction.. build, publish,base,final aliases are stage names
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build



# Step 2: Copy project file to the /src container folder
#WORKDIR /src
WORKDIR /src
#COPY ["src/WebApi/WebApi.csproj", "WebApi/"]
COPY . ./

# Step 3: Run a restore to download dependencies .. Generally RUN is used in package/application installation in new layer
# Restore as distinct layers
#RUN dotnet restore
RUN dotnet restore "src/WebApi/WebApi.csproj"

# Step 4: Copy app code to the container
# Copy everything
#COPY src/WebApi/bin/debug/net6.0/publish/ ./
#COPY . .
#WORKDIR "/src/WebApi"

# Step 5: Build the app in Release mode
RUN dotnet build "src/WebApi/WebApi.csproj" -c Release -o /App/build

# Step 6: Publish the application in Release mode
#This stage is used to publish your application.
FROM build AS publish
#RUN dotnet publish -c Release -o out
RUN dotnet publish "src/WebApi/WebApi.csproj" -c Release -o /App/publish
#Untill this level in this stage.. it just creates the final application artifact (/App/publish) along with src and build tools

# Step 8: Move the /app folder and run the compiled app
# This stage defines the base runtime image that will be used to run your application.
#It contains the minimal dependencies to run your application
FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base
FROM base AS final
#This stage actually deploy to production. It is based on the required runtime base image, along with the published artifcacts(/App/publish) copied from "publish" aliased stage/layer/image to containerrootOrWorkDir(.)
WORKDIR /App
COPY --from=publish /App/publish .
# Step IN FIRST STAGE: Expose port 5000 in the container
#add an environment variable to the service container image.
#The instruction should be placed in the base stage of the Dockerfile (the first stage in the file)
EXPOSE 5000
#Expose application Url Port
ENV ASPNETCORE_URLS=http://+:5000
ENV ASPNETCORE_ENVIRONMENT Development
ENTRYPOINT ["dotnet", "WebApi.dll"]
#RUN Generally is used in package/application installation in new layer.. RUN apt-get -y update && ["apt-get","install","apache2"]
#CMD Command is used to set default commands for the container which can be overidden in runtime..only bash does it and not shell.. CMD echo "helloworld" && ["/bin/echo","helloworld"]
#ENTRYPOINT(similar to CMD) helps in configuring container to run in executable form with some default commands tu run always when starting the conatiner  .. ENTRYPOINT echo "helloworld" && ["/bin/echo","helloworld"]
#All can be in SHELL FORM
#<instruction> <commmand>
#All can be in EXECUTABLE FORM
#<instruction> ["executable","param1","param2",...]



#Multi-stage builds are always best-practice when you're deploying to Docker,
# but this one is more complex than it needs to be in general.
#It has additional stages to make it quicker for Visual Studio to develop inside Docker images too,
#using "fast mode". If you're only deploying to Docker, not developing in Docker, then you can simplify this file.

#Every "FROM" instruction in dockerfile is a new STAGE/LAYER added to existing layer ..
#we are trying to use previous stage output in subsequent stage to created a smaller/reduced size image

wsllinux@HomeTechPAD:~/dotnetProjects/WebApi$ #.....docker inspect on image will have container/app url exposed port details ... docker inspect on container will give us port mapping between container and Host port
wsllinux@HomeTechPAD:~/dotnetProjects/WebApi$
